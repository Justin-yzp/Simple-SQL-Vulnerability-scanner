import requests
from bs4 import BeautifulSoup
import sys
from urllib.parse import urljoin

s = requests.Session()
s.headers["User-Agent"] = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
                           "Chrome/128.0.0.0 Safari/537.36")

# Function to get all forms
def get_forms(url):
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")

# Function to get form details
def form_details(form):
    detailsOfForm = {}
    action = form.attrs.get("action", "")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"name": input_name, "type": input_type, "value": input_value})

    detailsOfForm["action"] = action
    detailsOfForm["method"] = method
    detailsOfForm["inputs"] = inputs
    return detailsOfForm

# Function to check if the response indicates an SQL injection vulnerability
def vulnerable(response):
    errors = {"quoted string not properly terminated",
              "unclosed quotation mark after the char string",
              "you have an error in your SQL syntax"}
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

# Function to test SQL injection
def sql_injection(url):
    forms = get_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}")

    for form in forms:
        details = form_details(form)
        form_action = urljoin(url, details["action"])
        for i in "\"'":
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    data[input_tag["name"]] = input_tag["value"] + "1"
                elif input_tag["type"] != "submit":
                    data[input_tag["name"]] = f"test{i}"
            print(f"Testing with payloads for form at {form_action}")
            if details["method"].lower() == "post":
                res = s.post(form_action, data=data)
            elif details["method"].lower() == "get":
                res = s.get(form_action, params=data)
            else:
                continue  # Skip unsupported methods

            if vulnerable(res):
                print(f"[+] SQL Injection exploit Detected at {form_action}")
            else:
                print(f"[!] SQL Injection exploit Failed at {form_action}")

if __name__ == "__main__":
    urlToBeChecked = "http://k"
    sql_injection(urlToBeChecked)
